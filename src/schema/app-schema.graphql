### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


enum BloodGroup {
  A_negative
  A_positive
  AB_negative
  AB_positive
  B_negative
  B_positive
  O_negative
  O_positive
}

type BloodRequest {
  bloodGroup: BloodGroup!
  createdAt: DateTime!
  hospital: Hospital!
  id: ID!
  requester: User!
  status: Status!
  updatedAt: DateTime!
}

input BloodRequestCreateManyWithoutBloodRequestsInput {
  connect: [BloodRequestWhereUniqueInput!]
  create: [BloodRequestCreateWithoutRequesterInput!]
}

input BloodRequestCreateWithoutRequesterInput {
  bloodGroup: BloodGroup!
  createdAt: DateTime
  hospital: HospitalCreateOneWithoutHospitalInput!
  id: ID
  status: Status!
  updatedAt: DateTime
}

input BloodRequestScalarWhereInput {
  AND: [BloodRequestScalarWhereInput!]
  bloodGroup: BloodGroup
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [BloodRequestScalarWhereInput!]
  OR: [BloodRequestScalarWhereInput!]
  status: Status
  updatedAt: DateTimeFilter
}

input BloodRequestUpdateManyDataInput {
  bloodGroup: BloodGroup
  createdAt: DateTime
  id: ID
  status: Status
  updatedAt: DateTime
}

input BloodRequestUpdateManyWithoutRequesterInput {
  connect: [BloodRequestWhereUniqueInput!]
  create: [BloodRequestCreateWithoutRequesterInput!]
  delete: [BloodRequestWhereUniqueInput!]
  deleteMany: [BloodRequestScalarWhereInput!]
  disconnect: [BloodRequestWhereUniqueInput!]
  set: [BloodRequestWhereUniqueInput!]
  update: [BloodRequestUpdateWithWhereUniqueWithoutRequesterInput!]
  updateMany: [BloodRequestUpdateManyWithWhereNestedInput!]
  upsert: [BloodRequestUpsertWithWhereUniqueWithoutRequesterInput!]
}

input BloodRequestUpdateManyWithWhereNestedInput {
  data: BloodRequestUpdateManyDataInput!
  where: BloodRequestScalarWhereInput!
}

input BloodRequestUpdateWithoutRequesterDataInput {
  bloodGroup: BloodGroup
  createdAt: DateTime
  hospital: HospitalUpdateOneRequiredWithoutBloodRequestsInput
  id: ID
  status: Status
  updatedAt: DateTime
}

input BloodRequestUpdateWithWhereUniqueWithoutRequesterInput {
  data: BloodRequestUpdateWithoutRequesterDataInput!
  where: BloodRequestWhereUniqueInput!
}

input BloodRequestUpsertWithWhereUniqueWithoutRequesterInput {
  create: BloodRequestCreateWithoutRequesterInput!
  update: BloodRequestUpdateWithoutRequesterDataInput!
  where: BloodRequestWhereUniqueInput!
}

input BloodRequestWhereUniqueInput {
  id: ID
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

type Donor {
  bloodGroup: BloodGroup!
  createdAt: DateTime!
  document: String
  id: ID!
  updatedAt: DateTime!
  user: User!
}

input DonorCreateInput {
  bloodGroup: BloodGroup!
  createdAt: DateTime
  document: String
  id: ID
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input DonorCreateOneWithoutDonorInput {
  connect: DonorWhereUniqueInput
  create: DonorCreateWithoutUserInput
}

input DonorCreateWithoutUserInput {
  bloodGroup: BloodGroup!
  createdAt: DateTime
  document: String
  id: ID
  updatedAt: DateTime
}

input DonorUpdateInput {
  bloodGroup: BloodGroup
  createdAt: DateTime
  document: String
  id: ID
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutDonorInput
}

input DonorUpdateOneWithoutUserInput {
  connect: DonorWhereUniqueInput
  create: DonorCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: DonorUpdateWithoutUserDataInput
  upsert: DonorUpsertWithoutUserInput
}

input DonorUpdateWithoutUserDataInput {
  bloodGroup: BloodGroup
  createdAt: DateTime
  document: String
  id: ID
  updatedAt: DateTime
}

input DonorUpsertWithoutUserInput {
  create: DonorCreateWithoutUserInput!
  update: DonorUpdateWithoutUserDataInput!
}

input DonorWhereUniqueInput {
  id: ID
}

type Hospital {
  createdAt: DateTime!
  id: ID!
  lg: String!
  name: String!
  state: String!
  street: String!
  updatedAt: DateTime!
}

input HospitalCreateOneWithoutHospitalInput {
  connect: HospitalWhereUniqueInput
  create: HospitalCreateWithoutBloodRequestsInput
}

input HospitalCreateWithoutBloodRequestsInput {
  createdAt: DateTime
  id: ID
  lg: String!
  name: String!
  state: String!
  street: String!
  updatedAt: DateTime
}

input HospitalUpdateOneRequiredWithoutBloodRequestsInput {
  connect: HospitalWhereUniqueInput
  create: HospitalCreateWithoutBloodRequestsInput
  update: HospitalUpdateWithoutBloodRequestsDataInput
  upsert: HospitalUpsertWithoutBloodRequestsInput
}

input HospitalUpdateWithoutBloodRequestsDataInput {
  createdAt: DateTime
  id: ID
  lg: String
  name: String
  state: String
  street: String
  updatedAt: DateTime
}

input HospitalUpsertWithoutBloodRequestsInput {
  create: HospitalCreateWithoutBloodRequestsInput!
  update: HospitalUpdateWithoutBloodRequestsDataInput!
}

input HospitalWhereUniqueInput {
  id: ID
}

type Mutation {
  createOneDonor(data: DonorCreateInput!): Donor!
  createOneUser(data: UserCreateInput!): User!
  updateOneDonor(data: DonorUpdateInput!, where: DonorWhereUniqueInput!): Donor
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  userLogin(data: UserLoginInput): UserAuthPayload!
  userRegister(data: UserCreateInput): UserAuthPayload!
}

type Query {
  donors(after: ID, before: ID, first: Int, last: Int, skip: Int): [Donor!]!
  getCurrentUser: User
  hospitals(after: ID, before: ID, first: Int, last: Int, skip: Int): [Hospital!]!
  user(where: UserWhereUniqueInput!): User
}

enum Status {
  failed
  matched
  pending
  reprocessing
  success
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  createdAt: DateTime!
  donor: Donor
  email: String!
  firstName: String!
  id: ID!
  isDonor: Boolean!
  lastName: String
  lg: String
  password: String!
  phone: String!
  state: String
  street: String
  updatedAt: DateTime!
}

type UserAuthPayload {
  token: String!
  user: User!
}

input UserCreateInput {
  bloodRequests: BloodRequestCreateManyWithoutBloodRequestsInput
  createdAt: DateTime
  donor: DonorCreateOneWithoutDonorInput
  email: String!
  firstName: String!
  id: ID
  lastName: String
  lg: String
  password: String!
  phone: String!
  state: String
  street: String
  updatedAt: DateTime
}

input UserCreateOneWithoutUserInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutDonorInput
}

input UserCreateWithoutDonorInput {
  bloodRequests: BloodRequestCreateManyWithoutBloodRequestsInput
  createdAt: DateTime
  email: String!
  firstName: String!
  id: ID
  lastName: String
  lg: String
  password: String!
  phone: String!
  state: String
  street: String
  updatedAt: DateTime
}

input UserLoginInput {
  """Email"""
  email: String!

  """Password"""
  password: String!
}

input UserUpdateInput {
  bloodRequests: BloodRequestUpdateManyWithoutRequesterInput
  createdAt: DateTime
  donor: DonorUpdateOneWithoutUserInput
  email: String
  firstName: String
  id: ID
  lastName: String
  lg: String
  password: String
  phone: String
  state: String
  street: String
  updatedAt: DateTime
}

input UserUpdateOneRequiredWithoutDonorInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutDonorInput
  update: UserUpdateWithoutDonorDataInput
  upsert: UserUpsertWithoutDonorInput
}

input UserUpdateWithoutDonorDataInput {
  bloodRequests: BloodRequestUpdateManyWithoutRequesterInput
  createdAt: DateTime
  email: String
  firstName: String
  id: ID
  lastName: String
  lg: String
  password: String
  phone: String
  state: String
  street: String
  updatedAt: DateTime
}

input UserUpsertWithoutDonorInput {
  create: UserCreateWithoutDonorInput!
  update: UserUpdateWithoutDonorDataInput!
}

input UserWhereUniqueInput {
  email: String
  id: ID
}
